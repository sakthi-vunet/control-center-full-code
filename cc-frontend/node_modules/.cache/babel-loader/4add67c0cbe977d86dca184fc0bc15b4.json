{"ast":null,"code":"var _jsxFileName = \"/home/sakthi/control-center/cc-frontend/apps/control-center/src/context/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport url_backend from '../configs/url'; // Interface used to create context\n\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n// We are basically creating a AuthContext, We will be able to import it into any file\n// present in src folder. We will be able to access contextData using it.\n// We will basically wrap the entire app inside AuthProvider.\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const usertoken = localStorage.getItem('authTokens');\n  const [authTokens, setAuthTokens] = useState(() => usertoken !== null ? JSON.parse(usertoken) : '');\n  const [user, setUser] = useState(() => usertoken !== null ? jwt_decode(usertoken) : '');\n  const [loading, setLoading] = useState(true);\n  const history = useNavigate(); // backend for login\n\n  const url = url_backend + '/api/auth/token/'; // loginUser — Requires username and passwords. If the user is present is the database\n  // (credentials are valid), the user is logged in. Tokens (access & refresh) are stored\n  // in local storage,\n\n  const loginUser = async (username, password) => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      alert('Login successful');\n      history('/app/controlcenter/Home'); // to set current user datain the backend\n\n      getUserData(data);\n    } else {\n      alert(JSON.stringify(data));\n    }\n  }; // calls api/user to set current user in the backend everytime a user logs into the application\n\n\n  const getUserData = async tokendata => {\n    const url = url_backend + '/api/user/';\n    console.log(authTokens);\n\n    try {\n      const data = await axios({\n        method: 'get',\n        url: url,\n        headers: {\n          Authorization: `Bearer ${tokendata['access']}`\n        }\n      });\n      console.log('user', JSON.stringify(data.data));\n    } catch (e) {\n      console.log(e);\n    }\n  }; // registerUser — Requires username, password1, password2. This function registers the user\n  // in the database. Unique username, password match checks are done on backend. If the\n  // registration request is successful, then the user is redirected to a login page.\n\n\n  const url2 = url_backend + '/api/auth/register/';\n\n  const registerUser = async (username, password, password2) => {\n    const response = await fetch(url2, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password2\n      })\n    });\n\n    if (response.status === 201) {\n      history('/app/controlceter/login');\n    } else {\n      alert('Something is Wrong!');\n    }\n  }; // logoutUser — Simply logs the user out & clears the local storage.\n  // Whenever authTokens& state of loadingis changed. User state in changed\n  // (useEffect is causing this change). jwt_decode just decodes an access token.\n\n\n  const logoutUser = () => {\n    alert(JSON.stringify(user) + 'Logout Successful.');\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    history('/app/controlcenter/login');\n  };\n\n  useEffect(() => {\n    if (authTokens) {\n      setUser(jwt_decode(authTokens.access));\n    }\n\n    setLoading(false);\n  }, [authTokens, loading]);\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser,\n      setAuthTokens,\n      authTokens,\n      registerUser,\n      loginUser,\n      logoutUser\n    },\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"Nw08SK7cPYrsm/hOTYwiys4LaSY=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","React","useNavigate","axios","jwt_decode","url_backend","AuthContext","AuthProvider","children","usertoken","localStorage","getItem","authTokens","setAuthTokens","JSON","parse","user","setUser","loading","setLoading","history","url","loginUser","username","password","response","fetch","method","headers","body","stringify","data","json","status","access","setItem","alert","getUserData","tokendata","console","log","Authorization","e","url2","registerUser","password2","logoutUser","removeItem"],"sources":["/home/sakthi/control-center/cc-frontend/apps/control-center/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\nimport * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nimport url_backend from '../configs/url';\n\n// Interface used to create context\nexport interface IAuth {\n  user: any;\n  authTokens: any;\n  usertoken?: string;\n  setUser: (usertoken: string) => void;\n  setAuthTokens: (usertoken: string) => void;\n  registerUser: (username, password, password2) => void;\n  loginUser: (username, password) => void;\n  logoutUser: () => void;\n}\n\n// We are basically creating a AuthContext, We will be able to import it into any file\n// present in src folder. We will be able to access contextData using it.\n// We will basically wrap the entire app inside AuthProvider.\n\nexport const AuthContext = createContext<IAuth>({} as IAuth);\nexport const AuthProvider = ({ children }) => {\n  const usertoken = localStorage.getItem('authTokens');\n  const [authTokens, setAuthTokens] = useState(() =>\n    usertoken !== null ? JSON.parse(usertoken) : ''\n  );\n  const [user, setUser] = useState(() =>\n    usertoken !== null ? jwt_decode(usertoken) : ''\n  );\n\n  const [loading, setLoading] = useState(true);\n\n  const history = useNavigate();\n\n  // backend for login\n  const url = url_backend + '/api/auth/token/';\n\n  // loginUser — Requires username and passwords. If the user is present is the database\n  // (credentials are valid), the user is logged in. Tokens (access & refresh) are stored\n  // in local storage,\n  const loginUser = async (username, password) => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    const data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      alert('Login successful');\n\n      history('/app/controlcenter/Home');\n\n      // to set current user datain the backend\n      getUserData(data);\n    } else {\n      alert(JSON.stringify(data));\n    }\n  };\n\n  // calls api/user to set current user in the backend everytime a user logs into the application\n  const getUserData = async (tokendata) => {\n    const url = url_backend + '/api/user/';\n    console.log(authTokens);\n    try {\n      const data = await axios({\n        method: 'get',\n        url: url,\n        headers: { Authorization: `Bearer ${tokendata['access']}` },\n      });\n\n      console.log('user', JSON.stringify(data.data));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // registerUser — Requires username, password1, password2. This function registers the user\n  // in the database. Unique username, password match checks are done on backend. If the\n  // registration request is successful, then the user is redirected to a login page.\n  const url2 = url_backend + '/api/auth/register/';\n\n  const registerUser = async (username, password, password2) => {\n    const response = await fetch(url2, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password2,\n      }),\n    });\n    if (response.status === 201) {\n      history('/app/controlceter/login');\n    } else {\n      alert('Something is Wrong!');\n    }\n  };\n\n  // logoutUser — Simply logs the user out & clears the local storage.\n  // Whenever authTokens& state of loadingis changed. User state in changed\n  // (useEffect is causing this change). jwt_decode just decodes an access token.\n  const logoutUser = () => {\n    alert(JSON.stringify(user) + 'Logout Successful.');\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n\n    history('/app/controlcenter/login');\n  };\n\n  useEffect(() => {\n    if (authTokens) {\n      setUser(jwt_decode(authTokens.access));\n    }\n    setLoading(false);\n  }, [authTokens, loading]);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        setUser,\n        setAuthTokens,\n        authTokens,\n        registerUser,\n        loginUser,\n        logoutUser,\n      }}\n    >\n      {loading ? null : children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}