{"ast":null,"code":"var _jsxFileName = \"/home/sakthi/control-center/cc-frontend/apps/control-center/src/utils/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\n// import { Route, Navigate } from \"react-router-dom\";\n// import { useContext } from \"react\";\n// import {AuthContext} from \"../context/AuthContext\";\n// import * as React from 'react';\n// import { RouteComponentProps } from '@reach/router';\n// interface Props extends RouteComponentProps{\n//     [x:string]:any;\n// }\n// const PrivateRoute: React.FC<Props>= ({ children, ...rest }) => {\n//   const user = useContext(AuthContext);\n//   return <Route {...rest}>{!user ? <Navigate to=\"/app/controlcenter/login\" /> : children}</Route>;\n// };\n// export default PrivateRoute;\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const PrivateRoute = () => {\n  _s();\n\n  const user = useContext(Auth); // determine if authorized, from context or however you're doing it\n  // If authorized, return an outlet that will render child elements\n  // If not, return element that will navigate to login page\n\n  return auth ? _jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 19\n  }, this) : _jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 32\n  }, this);\n};\n\n_s(PrivateRoute, \"T/slviYl6xUb2nQaiedYLY1KgOo=\");\n\n_c = PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","PrivateRoute","user","useContext","Auth","auth"],"sources":["/home/sakthi/control-center/cc-frontend/apps/control-center/src/utils/PrivateRoute.tsx"],"sourcesContent":["// import { Route, Navigate } from \"react-router-dom\";\n// import { useContext } from \"react\";\n// import {AuthContext} from \"../context/AuthContext\";\n// import * as React from 'react';\n// import { RouteComponentProps } from '@reach/router';\n\n// interface Props extends RouteComponentProps{\n    \n//     [x:string]:any;\n// }\n\n// const PrivateRoute: React.FC<Props>= ({ children, ...rest }) => {\n//   const user = useContext(AuthContext);\n//   return <Route {...rest}>{!user ? <Navigate to=\"/app/controlcenter/login\" /> : children}</Route>;\n// };\n\n// export default PrivateRoute;\n\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\n\nexport const PrivateRoute = () => {\n    const user=useContext(Auth); // determine if authorized, from context or however you're doing it\n\n    // If authorized, return an outlet that will render child elements\n    // If not, return element that will navigate to login page\n    return auth ? <Outlet /> : <Navigate to=\"/login\" />;\n}"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,kBAAjC;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;EAAA;;EAC9B,MAAMC,IAAI,GAACC,UAAU,CAACC,IAAD,CAArB,CAD8B,CACD;EAE7B;EACA;;EACA,OAAOC,IAAI,GAAG,QAAC,MAAD;IAAA;IAAA;IAAA;EAAA,QAAH,GAAgB,QAAC,QAAD;IAAU,EAAE,EAAC;EAAb;IAAA;IAAA;IAAA;EAAA,QAA3B;AACH,CANM;;GAAMJ,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}