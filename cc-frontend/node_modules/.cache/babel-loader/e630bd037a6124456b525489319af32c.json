{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport jwt_decode from 'jwt-decode';\nimport url_backend from '../configs/url';\nimport { AuthContext } from '../context/AuthContext'; // We are accessing authTokens, setUser, setAuthTokens from useContext.\n// We need them to get and change state of the React app.\n// Furthermore, we are creating an axiosinstance having authentication headers assuring it to be only used on private routes.\n// Then we are decoding the user access token. Token is having exp date telling when it will expire. On the next line,\n//  we are just checking whether that token in valid or not.\n//  If expired, get new access token & change state of application.\n\nconst baseURL = url_backend + '/api/auth';\n\nconst useAxios = () => {\n  _s();\n\n  const {\n    authTokens,\n    setUser,\n    setAuthTokens\n  } = useContext(AuthContext);\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${authTokens == null ? void 0 : authTokens.access}`\n    }\n  });\n  axiosInstance.interceptors.request.use(async req => {\n    const user = jwt_decode(authTokens.access);\n    const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n    if (!isExpired) return req;\n    const response = await axios.post(`${baseURL}/token/refresh/`, {\n      refresh: authTokens.refresh\n    });\n    localStorage.setItem('authTokens', JSON.stringify(response.data));\n    setAuthTokens(response.data);\n    setUser(jwt_decode(response.data.access));\n    req.headers['Authorization '] = `Bearer ${response.data.access}`;\n    return req;\n  });\n  return axiosInstance;\n};\n\n_s(useAxios, \"BY8wXILb98JGRtiYNfD1oywxzJ4=\");\n\nexport default useAxios;","map":{"version":3,"names":["useContext","axios","dayjs","jwt_decode","url_backend","AuthContext","baseURL","useAxios","authTokens","setUser","setAuthTokens","axiosInstance","create","headers","Authorization","access","interceptors","request","use","req","user","isExpired","unix","exp","diff","response","post","refresh","localStorage","setItem","JSON","stringify","data"],"sources":["/home/sakthi/control-center/cc-frontend/apps/control-center/src/utils/useAxios.tsx"],"sourcesContent":["import { useContext } from 'react';\n\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport jwt_decode from 'jwt-decode';\n\nimport url_backend from '../configs/url';\nimport { AuthContext } from '../context/AuthContext';\n\n// We are accessing authTokens, setUser, setAuthTokens from useContext.\n// We need them to get and change state of the React app.\n// Furthermore, we are creating an axiosinstance having authentication headers assuring it to be only used on private routes.\n// Then we are decoding the user access token. Token is having exp date telling when it will expire. On the next line,\n//  we are just checking whether that token in valid or not.\n//  If expired, get new access token & change state of application.\n\nconst baseURL = url_backend + '/api/auth';\n\nconst useAxios = () => {\n  const { authTokens, setUser, setAuthTokens } = useContext(AuthContext);\n\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: { Authorization: `Bearer ${authTokens?.access}` },\n  });\n\n  axiosInstance.interceptors.request.use(async (req) => {\n    const user = jwt_decode(authTokens.access) as any;\n    const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n\n    if (!isExpired) return req;\n\n    const response = await axios.post(`${baseURL}/token/refresh/`, {\n      refresh: authTokens.refresh,\n    });\n\n    localStorage.setItem('authTokens', JSON.stringify(response.data));\n\n    setAuthTokens(response.data);\n    setUser(jwt_decode(response.data.access));\n\n    req.headers!['Authorization '] = `Bearer ${response.data.access}`;\n    return req;\n  });\n\n  return axiosInstance;\n};\n\nexport default useAxios;\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,wBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGF,WAAW,GAAG,WAA9B;;AAEA,MAAMG,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM;IAAEC,UAAF;IAAcC,OAAd;IAAuBC;EAAvB,IAAyCV,UAAU,CAACK,WAAD,CAAzD;EAEA,MAAMM,aAAa,GAAGV,KAAK,CAACW,MAAN,CAAa;IACjCN,OADiC;IAEjCO,OAAO,EAAE;MAAEC,aAAa,EAAG,UAASN,UAAV,oBAAUA,UAAU,CAAEO,MAAO;IAA9C;EAFwB,CAAb,CAAtB;EAKAJ,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAOC,GAAP,IAAe;IACpD,MAAMC,IAAI,GAAGjB,UAAU,CAACK,UAAU,CAACO,MAAZ,CAAvB;IACA,MAAMM,SAAS,GAAGnB,KAAK,CAACoB,IAAN,CAAWF,IAAI,CAACG,GAAhB,EAAqBC,IAArB,CAA0BtB,KAAK,EAA/B,IAAqC,CAAvD;IAEA,IAAI,CAACmB,SAAL,EAAgB,OAAOF,GAAP;IAEhB,MAAMM,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAN,CAAY,GAAEpB,OAAQ,iBAAtB,EAAwC;MAC7DqB,OAAO,EAAEnB,UAAU,CAACmB;IADyC,CAAxC,CAAvB;IAIAC,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACO,IAAxB,CAAnC;IAEAtB,aAAa,CAACe,QAAQ,CAACO,IAAV,CAAb;IACAvB,OAAO,CAACN,UAAU,CAACsB,QAAQ,CAACO,IAAT,CAAcjB,MAAf,CAAX,CAAP;IAEAI,GAAG,CAACN,OAAJ,CAAa,gBAAb,IAAkC,UAASY,QAAQ,CAACO,IAAT,CAAcjB,MAAO,EAAhE;IACA,OAAOI,GAAP;EACD,CAjBD;EAmBA,OAAOR,aAAP;AACD,CA5BD;;GAAMJ,Q;;AA8BN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}