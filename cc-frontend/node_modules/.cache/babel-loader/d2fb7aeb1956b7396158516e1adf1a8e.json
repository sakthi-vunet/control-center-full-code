{"ast":null,"code":"var _jsxFileName = \"/home/sakthi/control-center/cc-frontend/apps/control-center/src/context/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as React from 'react';\nimport url_backend from \"../configs/url\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n; // We are basically creating a AuthContext, We will be able to import it into any file \n// present in src folder. We will be able to access contextData using it.\n// We will basically wrap the entire app inside AuthProvider.\n// logoutUser — Simply logs the user out & clears the local storage.\n// Whenever authTokens& state of loadingis changed. User state in changed\n// (useEffect is causing this change). jwt_decode just decodes an access token.\n\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const usertoken = localStorage.getItem(\"authTokens\");\n  const [authTokens, setAuthTokens] = useState(() => usertoken !== null ? JSON.parse(usertoken) : '');\n  const [user, setUser] = useState(() => usertoken !== null ? jwt_decode(usertoken) : '');\n  const [loading, setLoading] = useState(true);\n  const history = useNavigate(); // backend for login\n\n  const url = url_backend + '/api/auth/token/'; // loginUser — Requires username and passwords. If the user is present is the database \n  // (credentials are valid), the user is logged in. Tokens (access & refresh) are stored \n  // in local storage,\n\n  const loginUser = async (username, password) => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      alert('Login successful');\n      history('/app/controlcenter/Home');\n      getUserData(data);\n    } else {\n      alert(JSON.stringify(data));\n    }\n  }; // calls api/user to set current user in the backend everytime a user logs into the application\n\n\n  const getUserData = async tokendata => {\n    const url = url_backend + '/api/user/';\n    console.log(authTokens);\n\n    try {\n      const data = await axios({\n        method: 'get',\n        url: url,\n        headers: {\n          Authorization: `Bearer ${tokendata['access']}`\n        }\n      });\n      console.log('user', JSON.stringify(data.data));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const url2 = url_backend + '/api/auth/register/';\n\n  const registerUser = async (username, password, password2) => {\n    const response = await fetch(url2, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password2\n      })\n    });\n\n    if (response.status === 201) {\n      history('/app/controlceter/login');\n    } else {\n      alert(\"Something is Wrong!\");\n    }\n  };\n\n  const logoutUser = () => {\n    alert(JSON.stringify(user) + 'Logout Successful.');\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n    history(\"/app/controlcenter/login\");\n  };\n\n  useEffect(() => {\n    if (authTokens) {\n      setUser(jwt_decode(authTokens.access));\n    }\n\n    setLoading(false);\n  }, [authTokens, loading]);\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser,\n      setAuthTokens,\n      authTokens,\n      registerUser,\n      loginUser,\n      logoutUser\n    },\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"4KEprf+Vk7TR/niRbyuI7EGphI8=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jwt_decode","useNavigate","React","url_backend","axios","AuthContext","AuthProvider","children","usertoken","localStorage","getItem","authTokens","setAuthTokens","JSON","parse","user","setUser","loading","setLoading","history","url","loginUser","username","password","response","fetch","method","headers","body","stringify","data","json","status","access","setItem","alert","getUserData","tokendata","console","log","Authorization","e","url2","registerUser","password2","logoutUser","removeItem"],"sources":["/home/sakthi/control-center/cc-frontend/apps/control-center/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, useState, useEffect} from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as React from 'react';\nimport url_backend from \"../configs/url\";\nimport axios from 'axios';\n\n\nexport interface IAuth{\nuser:any,\nauthTokens:any,\nusertoken?:string,\nsetUser:(usertoken:string)=>void,\nsetAuthTokens:(usertoken:string)=>void,\nregisterUser:(username,password,password2)=>void,\nloginUser:(username,password)=>void,\nlogoutUser:()=>void\n\n};\n\n// We are basically creating a AuthContext, We will be able to import it into any file \n// present in src folder. We will be able to access contextData using it.\n// We will basically wrap the entire app inside AuthProvider.\n\n\n// logoutUser — Simply logs the user out & clears the local storage.\n// Whenever authTokens& state of loadingis changed. User state in changed\n// (useEffect is causing this change). jwt_decode just decodes an access token.\n\nexport const AuthContext=createContext<IAuth>({} as IAuth);\nexport const AuthProvider= ({ children}) => {\n    const usertoken=localStorage.getItem(\"authTokens\");\n  const [authTokens, setAuthTokens] = useState(() =>usertoken!==null\n      ? JSON.parse(usertoken)\n      : '' \n );\n  const [user, setUser] = useState(() =>\n    usertoken!==null\n      ? jwt_decode(usertoken) \n      : '' \n  );\n\n  \n\n  const [loading, setLoading] = useState(true);\n\n  const history = useNavigate();\n\n  // backend for login\n  const url=url_backend+'/api/auth/token/';\n\n// loginUser — Requires username and passwords. If the user is present is the database \n// (credentials are valid), the user is logged in. Tokens (access & refresh) are stored \n// in local storage,\n  const loginUser = async (username, password) => {\n\n    \n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n\n    const data = await response.json();\n \n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      alert('Login successful');\n    \n    \n    history('/app/controlcenter/Home')\n    getUserData(data);\n    \n    } else {\n      alert(JSON.stringify(data));\n    }\n\n   \n  };\n\n  // calls api/user to set current user in the backend everytime a user logs into the application\n  const getUserData = async (tokendata) => {\n    const url = url_backend + '/api/user/';\n    console.log(authTokens)\n    try {\n     \n      const data= await axios({ method: 'get', url: url, headers: { Authorization: `Bearer ${tokendata['access']}` } })\n  \n      \n      console.log('user',JSON.stringify(data.data));\n      \n     \n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const url2=url_backend+'/api/auth/register/'\n  \n  const registerUser = async (username, password, password2) => {\n\n    const response = await fetch(url2, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password2\n      })\n    });\n    if (response.status === 201) {\n \n    history('/app/controlceter/login')\n    } else {\n      alert(\"Something is Wrong!\");\n    }\n\n  };\n\n  const logoutUser = () => {\n    alert(JSON.stringify(user) + 'Logout Successful.');\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n    \n   history(\"/app/controlcenter/login\")\n  };\n\n\n  useEffect(() => {\n    if (authTokens) {\n      setUser(jwt_decode(authTokens.access));\n    }\n    setLoading(false);\n  }, [authTokens, loading]);\n\n  return (\n\n    <AuthContext.Provider value={{\n    user,\n    setUser,\n    setAuthTokens,\n    authTokens,\n    registerUser,\n    loginUser,\n    logoutUser\n\n    }}>\n      {loading ? null : children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}